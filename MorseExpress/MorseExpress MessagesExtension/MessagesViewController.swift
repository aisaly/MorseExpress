//
//  MessagesViewController.swift
//  MorseExpress MessagesExtension
//
//  Created by Alexandra Isaly on 5/21/19.
//  Copyright Â© 2019 Alexandra Isaly. All rights reserved.
//

import UIKit
import Messages

protocol ViewControllerDelegate: AnyObject {
}


class MessagesViewController: MSMessagesAppViewController {
    static var singleton: MessagesViewController?
    weak var delegate: ViewControllerDelegate?
    static var messageFactory: MessageFactory = MessageFactory()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        MessagesViewController.singleton = self
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        MessagesViewController.messageFactory.cleanup()
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        super.willTransition(to: presentationStyle)
        
        // Hide child view controllers during the transition.
        removeAllChildViewControllers()
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        super.didTransition(to: presentationStyle)
        
        guard let conversation = activeConversation else { fatalError("Expected an active converstation") }
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        // Remove any child view controllers that have been presented.
        removeAllChildViewControllers()
        
        let controller: UIViewController
        if presentationStyle == .compact {
            controller = UIStoryboard(name: "MainInterface", bundle: nil).instantiateViewController(withIdentifier: "preview") as UIViewController;()
        } else {
            controller = UIStoryboard(name: "MainInterface", bundle: nil).instantiateViewController(withIdentifier: "full") as UIViewController;()
        }
        
        addChild(controller)
        view.addSubview(controller.view)
        
        controller.didMove(toParent: self)
    }
    
    private func removeAllChildViewControllers() {
        for child in children {
            child.willMove(toParent: nil)
            child.view.removeFromSuperview()
            child.removeFromParent()
        }
    }
    
    static func sendDot() {
        messageFactory.onDot()
        resetIdleTimer()
    }
    static func sendDash() {
        messageFactory.onDash()
        resetIdleTimer()
    }
    static var idleTimer: Timer?
    static var timeoutInSeconds: Double = 1.0
    
    static func resetIdleTimer() {
        if let idleTimer = idleTimer {
            idleTimer.invalidate()
        }
        
        idleTimer = Timer.scheduledTimer(
            timeInterval: timeoutInSeconds,
            target: self,
            selector: #selector(timeHasExceeded),
            userInfo: nil,
            repeats: false
        )
    }
    
    @objc static func timeHasExceeded() {
        messageFactory.onPause() // when timeout has happened, reflect that in the text
        MessagesViewController.singleton?.activeConversation?.insert(messageFactory.getMessage())
    }

}
